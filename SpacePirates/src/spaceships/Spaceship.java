package spaceships;

import java.util.ArrayList;
import creatures.*;
import equipment.*;
import food.*;
import scenarios.*;

/**
 * abstract class that sets up characteristics for different spaceship levels
 */
public abstract class Spaceship {
	private int inventoryCapacity; // capacity for the food inventory
	private int successRate; // success rate of an attack
	private int speed; // speed of the spaceship
	private int level; // level of the spaceship
	private String levelName; // name of the level
	private int money = 1000; // initial money given at the start of the game
	protected Equipment[] partsInUse; // equipments being used
	protected ArrayList<Creature> crewMembers; // members on the spaceship
	protected ArrayList<Equipment> spareEquipment; // spare equipment
	protected ArrayList<Food> foodInv; // list of food inventory

	/**
	 * constructor to initialize level, capacity of the inventory, members,
	 * food, attack success rate, and speed
	 * 
	 * @param name
	 *            - name of the level
	 * @param level
	 *            - level of the spaceship
	 * @param capacity
	 *            - inventory capacity
	 * @param members
	 *            - members on the spaceship
	 * @param food
	 *            - food in the spaceship
	 * @param successPercentage
	 *            - attack success rate
	 * @param speed
	 *            - speed of the spaceship
	 */
	public Spaceship(String name, int level, int capacity, ArrayList<Creature> members, ArrayList<Food> food,
			int successPercentage, int speed) {
		setInventoryCapacity(capacity);
		setCrewMembers(members);
		setFoodInv(food);
		setSuccessRate(getSuccessRate());
		setSpeed(speed);
		setLevel(level);
		spareEquipment = new ArrayList<Equipment>();

	}

	/**
	 * method to print health of each equipment
	 */
	public abstract void healthReport();

	/**
	 * method to replace equipments with spare ones
	 */
	public abstract void fixEquipment();

	/**
	 * method to determine the severity of damage on the ship after an attack
	 * 
	 * @param severity
	 *            - severity of the damage generated by a random number
	 */
	public abstract void damageShip(int severity);

	/**
	 * method to determine whether equipment is broken
	 * 
	 * @return true if broken, false otherwise
	 */
	public abstract boolean isBroken();

	/**
	 * method to determine if unbroken equipment can be upgraded
	 * 
	 * @return true if upgradeable, false otherwise
	 */
	public abstract boolean canUpgrade();

	/**
	 * method to return success rate
	 * 
	 * @return win rate after each level
	 */
	public abstract int getSuccessRate();

	/**
	 * method to determine if crew members were damaged after an attack
	 */
	public abstract void damageShip();

	/**
	 * method to return equipments in use
	 * 
	 * @return parts being used in spaceship
	 */
	public Equipment[] getPartsInUse() {
		return partsInUse;
	}

	/**
	 * method to set equipments in use
	 * 
	 * @param e
	 *            - array of equipment
	 */
	public void setPartsInUse(Equipment[] e) {
		partsInUse = e;
	}

	/**
	 * method to set equipments in use
	 * 
	 * @param index
	 *            - location in the equipment array
	 * @param part
	 *            - type of equipment
	 */
	public void setPartsInUse(int index, Equipment part) {

	}

	/**
	 * method to return information about crew members in the spaceship
	 * 
	 * @return crew members in the spaceship
	 */
	public ArrayList<Creature> getCrewMembers() {
		return crewMembers;
	}

	/**
	 * method to set crew members in the spaceship
	 * 
	 * @param crewMembers
	 *            - crew members in the spaceship
	 */
	public void setCrewMembers(ArrayList<Creature> crewMembers) {
		this.crewMembers = crewMembers;
	}

	/**
	 * method to return spare equipment on the spaceship
	 * 
	 * @return spare equipment available
	 */
	public ArrayList<Equipment> getSpareEquipment() {
		return spareEquipment;
	}

	/**
	 * method to set spare equipment on the spaceship
	 * 
	 * @param shipEquipment
	 *            - available spare equipment
	 */
	public void setSpareEquipment(ArrayList<Equipment> shipEquipment) {
		this.spareEquipment = shipEquipment;
	}

	/**
	 * method to add additional spare equipment
	 * 
	 * @param part
	 *            - type of equipment
	 */
	public void addSpareEquipment(Equipment part) {
		spareEquipment.add(part);
	}

	/**
	 * method to return food inventory
	 * 
	 * @return list of food in the inventory
	 */
	public ArrayList<Food> getFoodInv() {
		return foodInv;
	}

	/**
	 * method to set food inventory
	 * 
	 * @param foodInv
	 *            - list of food in the inventory
	 */
	public void setFoodInv(ArrayList<Food> foodInv) {
		this.foodInv = foodInv;
	}

	/**
	 * method to set a limit on inventory capacity
	 * 
	 * @param c
	 *            - capacity allowed
	 */
	public void setInventoryCapacity(int c) {
		inventoryCapacity = c;
	}

	/**
	 * method to return inventory capacity
	 * 
	 * @return limit on inventory capacity
	 */
	public int getInventoryCapacity() {
		return inventoryCapacity;
	}

	/**
	 * method to set success rate of an attack
	 * 
	 * @param successRate
	 *            - success rate of an attack
	 */
	public void setSuccessRate(int successRate) {
		this.successRate = successRate;
	}

	/**
	 * method to return speed of the spaceship
	 * 
	 * @return speed of the spaceship
	 */
	public int getSpeed() {
		return speed;
	}

	/**
	 * method to set speed of the spaceship
	 * 
	 * @param speed
	 *            - speed of the spaceship
	 */
	public void setSpeed(int speed) {
		this.speed = speed;
	}

	/**
	 * method to return the level of spaceship
	 * 
	 * @return spaceship level
	 */
	public int getLevel() {
		return level;
	}

	/**
	 * method to set the level of spaceship
	 * 
	 * @param level
	 *            - spaceship level
	 */
	public void setLevel(int level) {
		this.level = level;
	}

	/**
	 * method to return money left
	 * 
	 * @return money left
	 */
	public int getMoney() {
		return money;
	}

	/**
	 * method to set a=money left
	 * 
	 * @param money
	 *            - money left
	 */
	public void setMoney(int money) {
		this.money = money;
	}

	/**
	 * method to determine whether equipments are damaged
	 * 
	 * @return true if damaged, false otherwise
	 */
	public boolean isDamaged() {
		int checker = 0;
		for (int i = 0; i < 6; i++) {
			if (partsInUse[i].getHealthBar() != partsInUse[i].getMaxHealth()) {
				checker++;
			}
		}
		if (checker > 0) {
			return true;
		}
		return false;
	}

	/**
	 * method to count number of barriers
	 * 
	 * @return number of barriers
	 */
	public int getBarrierCount() {
		int counter = 0;
		for (int i = 0; i < spareEquipment.size(); i++) {
			if (spareEquipment.get(i) instanceof Barrier) {
				counter++;
			}
		}
		return counter;
	}

	/**
	 * method to count number of cannons
	 * 
	 * @return number of cannons
	 */
	public int getCannonCount() {
		int counter = 0;
		for (int i = 0; i < spareEquipment.size(); i++) {
			if (spareEquipment.get(i) instanceof Cannon) {
				counter++;
			}
		}
		return counter;
	}

	/**
	 * method to count number of fulstar plate
	 * 
	 * @return number of fulstar plate
	 */
	public int getFulstarPlateCount() {
		int counter = 0;
		for (int i = 0; i < spareEquipment.size(); i++) {
			if (spareEquipment.get(i) instanceof FulstarPlate) {
				counter++;
			}
		}
		return counter;
	}

	/**
	 * method to count number of hyperdrive
	 * 
	 * @return number of hyperdrive
	 */
	public int getHyperdriveCount() {
		int counter = 0;
		for (int i = 0; i < spareEquipment.size(); i++) {
			if (spareEquipment.get(i) instanceof Hyperdrive) {
				counter++;
			}
		}
		return counter;
	}

	/**
	 * method to count number of lasers
	 * 
	 * @return number of lasers
	 */
	public int getLaserCount() {
		int counter = 0;
		for (int i = 0; i < spareEquipment.size(); i++) {
			if (spareEquipment.get(i) instanceof Laser) {
				counter++;
			}
		}
		return counter;
	}

	/**
	 * method to count number of power flux capacitator
	 * 
	 * @return number of power flux capacitator
	 */
	public int getPowerFluxCapacitatorCount() {
		int counter = 0;
		for (int i = 0; i < spareEquipment.size(); i++) {
			if (spareEquipment.get(i) instanceof PowerFluxCapacitator) {
				counter++;
			}
		}
		return counter;
	}

}